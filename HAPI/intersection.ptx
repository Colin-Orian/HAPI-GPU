//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-26218862
// Cuda compilation tools, release 10.1, V10.1.168
// Based on LLVM 3.4svn
//

.version 6.4
.target sm_30
.address_size 64

	// .globl	_Z16intersect_spherei
.global .align 1 .b8 pointBuffer[1];
.global .align 1 .b8 radiusBuffer[1];
.global .align 1 .b8 colour_buffer[1];
.global .align 8 .b8 payload[32];
.global .align 4 .b8 currentRay[36];
.global .align 8 .f64 diff;
.global .align 8 .b8 theLaunchIndex[8];
.global .align 8 .f64 colour;
.global .align 4 .b8 _ZN21rti_internal_typeinfo7payloadE[8] = {82, 97, 121, 0, 32, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo10currentRayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4diffE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo14theLaunchIndexE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo6colourE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 1 .b8 _ZN21rti_internal_typename7payloadE[8] = {80, 97, 121, 108, 111, 97, 100, 0};
.global .align 1 .b8 _ZN21rti_internal_typename10currentRayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_typename4diffE[7] = {100, 111, 117, 98, 108, 101, 0};
.global .align 1 .b8 _ZN21rti_internal_typename14theLaunchIndexE[6] = {117, 105, 110, 116, 50, 0};
.global .align 1 .b8 _ZN21rti_internal_typename6colourE[7] = {100, 111, 117, 98, 108, 101, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum7payloadE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum10currentRayE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4diffE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum14theLaunchIndexE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum6colourE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic7payloadE[10] = {114, 116, 80, 97, 121, 108, 111, 97, 100, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic10currentRayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic4diffE[15] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 100, 105, 102, 102, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic14theLaunchIndexE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic6colourE[17] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 99, 111, 108, 111, 117, 114, 0};
.global .align 1 .b8 _ZN23rti_internal_annotation7payloadE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation10currentRayE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4diffE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation14theLaunchIndexE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation6colourE[1];

.visible .entry _Z16intersect_spherei(
	.param .u32 _Z16intersect_spherei_param_0
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<25>;
	.reg .b32 	%r<11>;
	.reg .f64 	%fd<49>;
	.reg .b64 	%rd<24>;


	ld.param.s32 	%rd10, [_Z16intersect_spherei_param_0];
	mov.u64 	%rd14, pointBuffer;
	cvta.global.u64 	%rd3, %rd14;
	mov.u32 	%r3, 1;
	mov.u32 	%r2, 24;
	mov.u64 	%rd13, 0;
	// inline asm
	call (%rd2), _rt_buffer_get_64, (%rd3, %r3, %r2, %rd10, %rd13, %rd13, %rd13);
	// inline asm
	ld.f64 	%fd1, [%rd2];
	ld.f64 	%fd2, [%rd2+8];
	ld.f64 	%fd3, [%rd2+16];
	mov.u64 	%rd15, radiusBuffer;
	cvta.global.u64 	%rd9, %rd15;
	mov.u32 	%r4, 8;
	// inline asm
	call (%rd8), _rt_buffer_get_64, (%rd9, %r3, %r4, %rd10, %rd13, %rd13, %rd13);
	// inline asm
	ld.global.f32 	%f1, [currentRay];
	cvt.f64.f32	%fd7, %f1;
	sub.f64 	%fd8, %fd7, %fd1;
	cvt.rn.f32.f64	%f2, %fd8;
	ld.global.f32 	%f3, [currentRay+4];
	cvt.f64.f32	%fd9, %f3;
	sub.f64 	%fd10, %fd9, %fd2;
	cvt.rn.f32.f64	%f4, %fd10;
	ld.global.f32 	%f5, [currentRay+8];
	cvt.f64.f32	%fd11, %f5;
	sub.f64 	%fd12, %fd11, %fd3;
	cvt.rn.f32.f64	%f6, %fd12;
	ld.global.f32 	%f7, [currentRay+12];
	ld.global.f32 	%f8, [currentRay+16];
	mul.f32 	%f9, %f8, %f4;
	fma.rn.f32 	%f10, %f7, %f2, %f9;
	ld.global.f32 	%f11, [currentRay+20];
	fma.rn.f32 	%f12, %f11, %f6, %f10;
	add.f32 	%f13, %f12, %f12;
	cvt.f64.f32	%fd4, %f13;
	mul.f32 	%f14, %f4, %f4;
	fma.rn.f32 	%f15, %f2, %f2, %f14;
	fma.rn.f32 	%f16, %f6, %f6, %f15;
	cvt.f64.f32	%fd13, %f16;
	ld.f64 	%fd14, [%rd8];
	mul.f64 	%fd15, %fd14, %fd14;
	sub.f64 	%fd16, %fd13, %fd15;
	mul.f64 	%fd17, %fd16, 0dC010000000000000;
	fma.rn.f64 	%fd5, %fd4, %fd4, %fd17;
	mov.u64 	%rd16, -4616189618054758400;
	st.global.u64 	[payload+24], %rd16;
	mov.f32 	%f17, 0f00000000;
	st.global.v2.f32 	[payload], {%f17, %f17};
	mov.u32 	%r5, 0;
	st.global.u32 	[payload+8], %r5;
	setp.ltu.f64	%p1, %fd5, 0d0000000000000000;
	@%p1 bra 	BB0_3;

	sqrt.rn.f64 	%fd18, %fd5;
	neg.f64 	%fd19, %fd4;
	sub.f64 	%fd20, %fd19, %fd18;
	mul.f64 	%fd21, %fd20, 0d3FE0000000000000;
	sub.f64 	%fd22, %fd18, %fd4;
	mul.f64 	%fd23, %fd22, 0d3FE0000000000000;
	setp.gt.f64	%p2, %fd21, 0d0000000000000000;
	selp.f64	%fd24, %fd21, 0dBFF0000000000000, %p2;
	setp.gt.f64	%p3, %fd23, 0d0000000000000000;
	setp.lt.f64	%p4, %fd23, %fd21;
	and.pred  	%p5, %p3, %p4;
	selp.f64	%fd6, %fd23, %fd24, %p5;
	cvt.rn.f32.f64	%f18, %fd6;
	// inline asm
	call (%r6), _rt_potential_intersection, (%f18);
	// inline asm
	setp.eq.s32	%p6, %r6, 0;
	@%p6 bra 	BB0_3;

	st.global.f64 	[payload+24], %fd6;
	ld.global.f32 	%f19, [currentRay];
	cvt.f64.f32	%fd25, %f19;
	ld.global.f32 	%f20, [currentRay+12];
	cvt.f64.f32	%fd26, %f20;
	fma.rn.f64 	%fd27, %fd6, %fd26, %fd25;
	sub.f64 	%fd28, %fd27, %fd1;
	ld.global.f32 	%f21, [currentRay+4];
	cvt.f64.f32	%fd29, %f21;
	ld.global.f32 	%f22, [currentRay+16];
	cvt.f64.f32	%fd30, %f22;
	fma.rn.f64 	%fd31, %fd6, %fd30, %fd29;
	sub.f64 	%fd32, %fd31, %fd2;
	ld.global.f32 	%f23, [currentRay+8];
	cvt.f64.f32	%fd33, %f23;
	ld.global.f32 	%f24, [currentRay+20];
	cvt.f64.f32	%fd34, %f24;
	fma.rn.f64 	%fd35, %fd6, %fd34, %fd33;
	sub.f64 	%fd36, %fd35, %fd3;
	mul.f64 	%fd37, %fd32, %fd32;
	fma.rn.f64 	%fd38, %fd28, %fd28, %fd37;
	fma.rn.f64 	%fd39, %fd36, %fd36, %fd38;
	sqrt.rn.f64 	%fd40, %fd39;
	div.rn.f64 	%fd41, %fd28, %fd40;
	div.rn.f64 	%fd42, %fd32, %fd40;
	div.rn.f64 	%fd43, %fd36, %fd40;
	mul.f64 	%fd44, %fd42, 0d0000000000000000;
	fma.rn.f64 	%fd45, %fd41, 0d0000000000000000, %fd44;
	sub.f64 	%fd46, %fd45, %fd43;
	setp.lt.f64	%p7, %fd46, 0d0000000000000000;
	selp.f64	%fd47, 0d0000000000000000, %fd46, %p7;
	st.global.f64 	[diff], %fd47;
	mov.u64 	%rd23, colour_buffer;
	cvta.global.u64 	%rd18, %rd23;
	// inline asm
	call (%rd17), _rt_buffer_get_64, (%rd18, %r3, %r4, %rd10, %rd13, %rd13, %rd13);
	// inline asm
	ld.f64 	%fd48, [%rd17];
	st.global.f64 	[colour], %fd48;
	// inline asm
	call (%r9), _rt_report_intersection, (%r5);
	// inline asm

BB0_3:
	ret;
}


